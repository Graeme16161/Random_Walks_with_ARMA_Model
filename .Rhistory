m = 100
#Starting Value
b = 0
#The white noise mean
mean = 0
#The white noise standard deviation
r = 1
#Calculate Realizations with rbrownian function
Realizations= rbrownian(n, m, b0 = b, mu = mean, sd = r )
#Convert to data frame
Realizations = as.data.frame(t(Realizations))
#Create vector of Dates
dates <- seq(as.Date("2016-01-01"), length = m +1, by = "days")
#Create time series object of realizations
Brownian = xts(x = t.test, order.by = dates)
plot(Brownian)
#Numeber of realizations
n = 5
#Number of steps
m = 100
#Starting Value
b = 0
#The white noise mean
mean = .4
#The white noise standard deviation
r = 1
#Calculate Realizations with rbrownian function
Realizations= rbrownian(n, m, b0 = b, mu = mean, sd = r )
#Convert to data frame
Realizations = as.data.frame(t(Realizations))
#Create vector of Dates
dates <- seq(as.Date("2016-01-01"), length = m +1, by = "days")
#Create time series object of realizations
Brownian = xts(x = t.test, order.by = dates)
plot(Brownian)
#Numeber of realizations
n = 5
#Number of steps
m = 100
#Starting Value
b = 0
#The white noise mean
mean = .4
#The white noise standard deviation
r = 1
#Calculate Realizations with rbrownian function
Realizations= rbrownian(n, m, b0 = b, mu = mean, sd = r )
#Convert to data frame
Realizations = as.data.frame(t(Realizations))
#Create vector of Dates
dates <- seq(as.Date("2016-01-01"), length = m +1, by = "days")
#Create time series object of realizations
Brownian = xts(x = t.test, order.by = dates)
plot(Brownian)
#Numeber of realizations
n = 5
#Number of steps
m = 100
#Starting Value
b = 0
#The white noise mean
mean = .4
#The white noise standard deviation
r = 1
#Calculate Realizations with rbrownian function
Realizations= rbrownian(n, m, b0 = b, mu = mean, sd = r )
#Convert to data frame
Realizations = as.data.frame(t(Realizations))
#Create vector of Dates
dates <- seq(as.Date("2016-01-01"), length = m +1, by = "days")
#Create time series object of realizations
Brownian = xts(x = Realizations, order.by = dates)
plot(Brownian)
#Numeber of realizations
n = 5
#Number of steps
m = 100
#Starting Value
b = 0
#The white noise mean
mean = .4
#The white noise standard deviation
r = 1
#Calculate Realizations with rbrownian function
Realizations= rbrownian(n, m, b0 = b, mu = mean, sd = r )
#Convert to data frame
Realizations = as.data.frame(t(Realizations))
#Create vector of Dates
dates <- seq(as.Date("2016-01-01"), length = m +1, by = "days")
#Create time series object of realizations
Brownian = xts(x = Realizations, order.by = dates)
plot(Brownian)
#Numeber of realizations
n = 5
#Number of steps
m = 100
#Starting Value
b = 0
#The white noise mean
mean = .4
#The white noise standard deviation
r = 1
#Calculate Realizations with rbrownian function
Realizations= rbrownian(n, m, b0 = b, mu = mean, sd = r )
#Convert to data frame
Realizations = as.data.frame(t(Realizations))
#Create vector of Dates
dates <- seq(as.Date("2016-01-01"), length = m +1, by = "days")
#Create time series object of realizations
Brownian = xts(x = Realizations, order.by = dates)
plot(Brownian)
#Numeber of realizations
n = 5
#Number of steps
m = 100
#Starting Value
b = 0
#The white noise mean
mean = 1
#The white noise standard deviation
r = 1
#Calculate Realizations with rbrownian function
Realizations= rbrownian(n, m, b0 = b, mu = mean, sd = r )
#Convert to data frame
Realizations = as.data.frame(t(Realizations))
#Create vector of Dates
dates <- seq(as.Date("2016-01-01"), length = m +1, by = "days")
#Create time series object of realizations
Brownian = xts(x = Realizations, order.by = dates)
plot(Brownian)
#Numeber of realizations
n = 5
#Number of steps
m = 100
#Starting Value
b = 0
#The white noise mean
mean = 1
#The white noise standard deviation
r = 1
#Calculate Realizations with rbrownian function
Realizations= rbrownian(n, m, b0 = b, mu = mean, sd = r )
#Convert to data frame
Realizations = as.data.frame(t(Realizations))
#Create vector of Dates
dates <- seq(as.Date("2016-01-01"), length = m +1, by = "days")
#Create time series object of realizations
Brownian = xts(x = Realizations, order.by = dates)
plot(Brownian)
#Numeber of realizations
n = 5
#Number of steps
m = 100
#Starting Value
b = 0
#The white noise mean
mean = 1
#The white noise standard deviation
r = 1
#Calculate Realizations with rbrownian function
Realizations= rbrownian(n, m, b0 = b, mu = mean, sd = r )
#Convert to data frame
Realizations = as.data.frame(t(Realizations))
#Create vector of Dates
dates <- seq(as.Date("2016-01-01"), length = m +1, by = "days")
#Create time series object of realizations
Brownian = xts(x = Realizations, order.by = dates)
plot(Brownian)
#Numeber of realizations
n = 5
#Number of steps
m = 100
#Starting Value
b = 0
#The white noise mean
mean = 1
#The white noise standard deviation
r = .1
#Calculate Realizations with rbrownian function
Realizations= rbrownian(n, m, b0 = b, mu = mean, sd = r )
#Convert to data frame
Realizations = as.data.frame(t(Realizations))
#Create vector of Dates
dates <- seq(as.Date("2016-01-01"), length = m +1, by = "days")
#Create time series object of realizations
Brownian = xts(x = Realizations, order.by = dates)
plot(Brownian)
plot(Brownian, xlab = "Stock Return", main = "Cumulative Returns")
legend(x = "topleft", legend = c("Stock_1", "Stock_2", "Stock_3", "Stock_4", "Stock_5"),
lty = 1)
plot(Brownian, xlab = "Stock Return", main = "Cumulative Returns", screens = 1)
legend(x = "topleft", legend = c("Stock_1", "Stock_2", "Stock_3", "Stock_4", "Stock_5"),
lty = 1)
#Numeber of realizations
n = 5
#Number of steps
m = 100
#Starting Value
b = 1
#Mean of ENTIRE realization
mean = 1
#Standard deviation of ENTIRE
r = .1
#Calculate Realizations with rbrownian function
Realizations= rbrownian(n, m, b0 = b, mu = mean, sd = r )
#Convert to data frame
Realizations = as.data.frame(t(Realizations))
#Create vector of Dates
dates <- seq(as.Date("2016-01-01"), length = m +1, by = "days")
#Create time series object of realizations
Brownian = xts(x = Realizations, order.by = dates)
plot(Brownian, xlab = "Stock Return", main = "Cumulative Returns", screens = 1)
legend(x = "topleft", legend = c("Stock_1", "Stock_2", "Stock_3", "Stock_4", "Stock_5"),
lty = 1)
#Numeber of realizations
n = 5
#Number of steps
m = 100
#Starting Value
b = 1
#Mean of ENTIRE realization
mean = 1
#Standard deviation of ENTIRE
r = .5
#Calculate Realizations with rbrownian function
Realizations= rbrownian(n, m, b0 = b, mu = mean, sd = r )
#Convert to data frame
Realizations = as.data.frame(t(Realizations))
#Create vector of Dates
dates <- seq(as.Date("2016-01-01"), length = m +1, by = "days")
#Create time series object of realizations
Brownian = xts(x = Realizations, order.by = dates)
plot(Brownian, xlab = "Stock Return", main = "Cumulative Returns", screens = 1)
legend(x = "topleft", legend = c("Stock_1", "Stock_2", "Stock_3", "Stock_4", "Stock_5"),
lty = 1)
knitr::opts_chunk$set(echo = TRUE)
library(quantmod)
getSymbols("FIT", src = "yahoo")
getSymbols("TWTR", src = "yahoo")
class(fit)
class(FIT)
chart_Series(FIT )
chart_Series(FIT,type = c("auto") )
chart_Series(FIT,type = c("candlesticks") )
chart_Series(FIT,type = c("matchsticks") )
chart_Series(FIT,type = c("bars") )
chart_Series(FIT,type = c("line") )
chart_Series(FIT,type = c("line"), theme = chart_theme("black") )
chart_Series(FIT,type = c("line"), theme = chartTheme("black") )
chart_Series(FIT,type = c("line"))
chartTheme("black")
FIT_2018 = FIT["2018"]
FIT_2018 = FIT["2018"]
chart_Series(FIT_2018,type = c("bars"))
FIT_2018 = FIT["2018-01"]
chart_Series(FIT_2018,type = c("bars"))
FIT_2018 = FIT["2018-01"]
chart_Series(FIT_2018,type = c("matchsticks"))
FIT_2018 = FIT["2018-01"]
chart_Series(FIT_2018,type = c("candlesticks"))
chart_Series(FIT,type = c("line"), name = "FitBit Stock Price")
FIT_2018 = FIT["2018-01"]
chart_Series(FIT_2018,type = c("candlesticks"), name = "FitBit January 2018 Stock Price")
candleChart(FIT_2018)
lineChart(FIT_2018)
barChart(FIT_2018)
barChart(FIT_2018, name = "FitBit Stock Price January 2018")
candleChart(FIT_2018, name = "FitBit Stock Price January 2018")
is.quantmod(FIT)
as.quantmod.OHLC(FIT)
is.quantmod(FIT)
first_model = buildModel(FIT, method = "randomForest", training.per = c('2015-06-07','2018-01-01'))
setwd("~/GitHub/SDE Package Demos/Random_Walks_with_ARIMA")
knitr::opts_chunk$set(echo = TRUE)
# Generate a RW model using arima.sim all zeros for white noise
random_walk <- arima.sim(model = list(order = c(0, 1, 0)), n = 100, mean = 0, sd = 1)
# Plot random_walk
ts.plot(random_walk)
# Calculate the first difference series
random_walk_diff <- diff(random_walk)
# Plot random_walk_diff
ts.plot(random_walk_diff)
model_wn <- arima(x = random_walk_diff, order = c(0,0,0))
# Store the value of the estimated time trend (intercept)
int_wn <- model_wn$coef
# Plot the original random_walk data
ts.plot(random_walk)
# Use abline(0, ...) to add time trend to the figure
abline(0,int_wn)
acf(random_walk_diff, lag.max = 1, plot = FALSE)
#for plot
acf(random_walk_diff)
#for random walk we see decent amount of persistance
acf(random_walk_diff)
acf(random_walk_diff, lag.max = 1, plot = FALSE)
#for plot
acf(random_walk_diff)
#for random walk we see decent amount of persistance
acf(random_walk)
qqplot(random_walk)
qqline(random_walk)
plot(qqnorm(random_walk),main = "Apple return QQ-plot")
test = as.data.frame(random_walk_diff)
View(test)
library(tidyverse)
random_walk_df = as.data.frame(random_walk)
white_noise_df = as.data.frame(random_walk_diff)
View(random_walk_df)
random_walk_df = as.data.frame(random_walk)
white_noise_df = as.data.frame(random_walk_diff)
graph_RW =  mutate(random_walk_df,time = row_number())
graph_WN =  mutate(white_noise_df,time = row_number())
ggplot(random_walk_df, aes(x = time, y = x)) + geom_line()
random_walk_df = as.data.frame(random_walk)
white_noise_df = as.data.frame(random_walk_diff)
graph_RW =  mutate(random_walk_df,time = row_number())
graph_WN =  mutate(white_noise_df,time = row_number())
ggplot(graph_RW, aes(time, x)) + geom_line()
random_walk_df = as.data.frame(random_walk)
white_noise_df = as.data.frame(random_walk_diff)
graph_RW =  mutate(random_walk_df,time = row_number())
graph_WN =  mutate(white_noise_df,time = row_number())
ggplot(graph_RW, aes(time, x)) + geom_line() +
labs(title = "Sample Random Walk", x = "Time", y = "X Value")
random_walk_df = as.data.frame(random_walk)
white_noise_df = as.data.frame(random_walk_diff)
graph_RW =  mutate(random_walk_df,time = row_number())
graph_WN =  mutate(white_noise_df,time = row_number())
ggplot(graph_RW, aes(time, x)) + geom_line() +
labs(title = "Sample Random Walk", x = "Time", y = "X Value")
ggplot(graph_WN, aes(x)) + geom_histogram() +
labs(title = "Sample Random Walk", x = "Time", y = "X Value")
random_walk_df = as.data.frame(random_walk)
white_noise_df = as.data.frame(random_walk_diff)
graph_RW =  mutate(random_walk_df,time = row_number())
graph_WN =  mutate(white_noise_df,time = row_number())
ggplot(graph_RW, aes(time, x)) + geom_line() +
labs(title = "Sample Random Walk", x = "Time", y = "X Value")
ggplot(graph_WN, aes(x)) + geom_histogram() +
labs(title = "Step Sizes in Random Walk", x = "Step Size", y = "")
#for random walk
acf(random_walk)
#for random walk increment size
acf(random_walk_diff)
#for random walk
acf(random_walk)
title(main = "Autocorrelation of the Random Walk")
#for random walk increment size
acf(random_walk_diff)
title(main = "Autocorrelation of the White Noise")
acf(random_walk)
title(main = "Autocorrelation of the Random Walk")
library(tidyverse)
library(MASS)
Noise_Vec = as.vector(white_noise_df$x)
fitdistr(x, "normal")
Noise_Vec = as.vector(white_noise_df$x)
fitdistr(Noise_Vec, "normal")
# Generate a random walk model witout drift and a standard deviation of 1
random_walk <- arima.sim(model = list(order = c(0, 1, 0)), n = 500, mean = 0, sd = 1)
# Calculate the first difference series this will be white noise
random_walk_diff <- diff(random_walk)
random_walk_df = as.data.frame(random_walk)
white_noise_df = as.data.frame(random_walk_diff)
graph_RW =  mutate(random_walk_df,time = row_number())
graph_WN =  mutate(white_noise_df,time = row_number())
ggplot(graph_RW, aes(time, x)) + geom_line() +
labs(title = "Sample Random Walk", x = "Time", y = "X Value")
ggplot(graph_WN, aes(x)) + geom_histogram() +
labs(title = "Histogram of Increment Sizes in Random Walk", x = "Step Size", y = "")
Noise_Vec = as.vector(white_noise_df$x)
fitdistr(Noise_Vec, "normal")
#for random walk
acf(random_walk)
title(main = "Autocorrelation of the Random Walk")
#for random walk increment size
acf(random_walk_diff)
title(main = "Autocorrelation of the White Noise")
library(tidyverse)
library(MASS)
library(quantmod)
getSymbols("DJIA", src = "yahoo")
chart_Series(DJIA)
getSymbols("DJIA", src = "yahoo")
getSymbols("DJI", src = "yahoo")
chart_Series(DJI)
class(DJI)
Stock_Close = as.ts(DJI$DJI.Close)
ts.plot(Stock_Close)
Stock_Close = as.ts(DJI$DJI.Adjusted)
ts.plot(Stock_Close)
getSymbols("INX", src = "yahoo")
chart_Series(INX)
getSymbols("S&P", src = "yahoo")
getSymbols("^GSPC", src = "yahoo")
chart_Series(^GSPC)
getSymbols("^GSPC", src = "yahoo")
chart_Series(GSPC)
Stock_Close = as.ts(GSPC)
View(Stock_Close)
ts.plot(Stock_Close)
Stock_Close = as.ts(GSPC$GSPC.Close)
ts.plot(Stock_Close)
getSymbols("^GSPC", src = "yahoo")
SP_Close = as.ts(GSPC$GSPC.Close)
View(GSPC)
SP_Close_df = as.data.frame(SP_Close)
graph_SP_Close =  mutate(SP_Close_df,time = row_number())
View(graph_SP_Close)
SP_Close_df = as.data.frame(SP_Close)
graph_SP_Close =  mutate(SP_Close_df,time = row_number())
ggplot(graph_SP_Close, aes(time, x)) + geom_line() +
labs(title = "S&P 500", x = "Number of Trading Days Since January 3rd 2007", y = "S&P 500 Closing Value")
white_noise_df = as.data.frame(SP_Diff)
SP_Diff = diff(SP_Close)
white_noise_df = as.data.frame(SP_Diff)
graph_WN =  mutate(white_noise_df,time = row_number())
ggplot(graph_WN, aes(x)) + geom_histogram() +
labs(title = "Histogram of S&P 500 Daily Closing Change", x = "Step Size", y = "")
white_noise_df = as.data.frame(SP_Diff)
graph_WN =  mutate(white_noise_df,time = row_number())
ggplot(graph_WN, aes(x)) + geom_histogram() +
labs(title = "Histogram of S&P 500 Daily Closing Change", x = "Step Size", y = "")
ggplot(graph_WN, aes(x)) + geom_boxplot() +
labs(title = "Histogram of S&P 500 Daily Closing Change", x = "Step Size", y = "")
white_noise_df = as.data.frame(SP_Diff)
graph_WN =  mutate(white_noise_df,time = row_number())
ggplot(graph_WN, aes(x)) + geom_histogram() +
labs(title = "Histogram of S&P 500 Daily Closing Change", x = "Step Size", y = "")
ggplot(graph_WN, aes(1,x)) + geom_boxplot() +
labs(title = "Histogram of S&P 500 Daily Closing Change", x = "Step Size", y = "")
SP_Vec = as.vector(SP_df$x)
SP_df = as.data.frame(SP_Diff)
graph_SP =  mutate(SP_df,time = row_number())
ggplot(graph_SP, aes(x)) + geom_histogram() +
labs(title = "Histogram of S&P 500 Daily Closing Change", x = "Step Size", y = "")
SP_Vec = as.vector(SP_df$x)
fitdistr(SP_Vec, "normal")
?fitdistr
f = fitdistr(SP_Vec, "normal")
f$estimate
f$sd
f$n
f$vcov
f$loglik
qqplot(Noise_Vec)
plot(qqnorm(Noise_Vec),main = "Apple return QQ-plot")
qqline(Noise_Vec,col = "red")
plot(qqnorm(Noise_Vec),main = "Q-Q Plot of Simulated Random Walk Increments", xlab = "Normal Theoretical Quantiles", ylab = "Normal Data Quantiles")
qqline(Noise_Vec,col = "red")
plot(qqnorm(Noise_Vec),main = "Q-Q Plot of Simulated Random Walk Increments", xlab = "Normal Theoretical Quantiles", ylab = "Normal Data Quantiles")
qqline(Noise_Vec,col = "red")
plot(qqnorm(SP_Vec),main = "Q-Q Plot of S&P 500 Increments", xlab = "Normal Theoretical Quantiles", ylab = "Normal Data Quantiles")
qqline(Noise_Vec,col = "red")
plot(qqnorm(SP_Vec),main = "Q-Q Plot of S&P 500 Increments", xlab = "Normal Theoretical Quantiles", ylab = "Normal Data Quantiles")
qqline(SP_Vec,col = "red")
getSymbols("^GSPC", src = "yahoo")
SP_Close = log(as.ts(GSPC$GSPC.Close))
SP_Close_df = as.data.frame(SP_Close)
graph_SP_Close =  mutate(SP_Close_df,time = row_number())
ggplot(graph_SP_Close, aes(time, x)) + geom_line() +
labs(title = "S&P 500", x = "Number of Trading Days Since January 3rd 2007", y = "S&P 500 Closing Value")
SP_Diff = diff(SP_Close)
SP_df = as.data.frame(SP_Diff)
graph_SP =  mutate(SP_df,time = row_number())
ggplot(graph_SP, aes(x)) + geom_histogram() +
labs(title = "Histogram of S&P 500 Daily Closing Change", x = "Step Size", y = "")
SP_Vec = as.vector(SP_df$x)
fitdistr(SP_Vec, "normal")
plot(qqnorm(SP_Vec),main = "Q-Q Plot of S&P 500 Increments", xlab = "Normal Theoretical Quantiles", ylab = "Normal Data Quantiles")
qqline(SP_Vec,col = "red")
acf(SP_Close)
title(main = "Autocorrelation of Log of S&P 500")
acf(SP_Diff)
title(main = "Autocorrelation of Log of S&P 500 Increments")
#for random walk
acf(random_walk, main = "Autocorrelation of the Random Walk")
#for random walk increment size
acf(random_walk_diff, main =  "Autocorrelation of the White Noise")
View(SP_df)
plot(qqnorm(SP_Vec),main = "Q-Q Plot of Log of S&P 500 Increments", xlab = "Normal Theoretical Quantiles", ylab = "Normal Data Quantiles")
qqline(SP_Vec,col = "red")
ggplot(SP_df, aes(x))+ stat_qq() + stat_qq_line()
install.packages("qqplotr")
library(tidyverse)
library(MASS)
library(quantmod)
library(qqplotr)
plot(qqnorm(SP_Vec),main = "Q-Q Plot of Log of S&P 500 Increments", xlab = "Normal Theoretical Quantiles", ylab = "Normal Data Quantiles")
qqline(SP_Vec,col = "red")
ggplot(SP_df, aes(x))+ stat_qq() + stat_qq_line()
plot(qqnorm(SP_Vec),main = "Q-Q Plot of Log of S&P 500 Increments", xlab = "Normal Theoretical Quantiles", ylab = "Normal Data Quantiles")
qqline(SP_Vec,col = "red")
ggplot(SP_df, aes(sample = x))+ stat_qq() + stat_qq_line()
plot(qqnorm(SP_Vec),main = "Q-Q Plot of Log of S&P 500 Increments", xlab = "Normal Theoretical Quantiles", ylab = "Normal Data Quantiles")
qqline(SP_Vec,col = "red")
ggplot(SP_df, aes(sample = x))+ stat_qq() + stat_qq_line()
plot(qqnorm(SP_Vec),main = "Q-Q Plot of Log of S&P 500 Increments", xlab = "Normal Theoretical Quantiles", ylab = "Normal Data Quantiles")
qqline(SP_Vec,col = "red")
ggplot(SP_df, aes(sample = x))+ stat_qq() + stat_qq_line(color = "red")
plot(qqnorm(SP_Vec),main = "Q-Q Plot of Log of S&P 500 Increments", xlab = "Normal Theoretical Quantiles", ylab = "Normal Data Quantiles")
qqline(SP_Vec,col = "red")
plot(qqnorm(SP_Vec),main = "Q-Q Plot of Log of S&P 500 Increments", xlab = "Normal Theoretical Quantiles", ylab = "Normal Data Quantiles")
qqline(SP_Vec,col = "red")
plot(qqnorm(SP_Vec),main = "Q-Q Plot of Log of S&P 500 Increments", xlab = "Normal Theoretical Quantiles", ylab = "Normal Data Quantiles")
qqline(SP_Vec,col = "red")
plot(qqnorm(SP_Vec),main = "Q-Q Plot of Log of S&P 500 Increments", xlab = "Normal Theoretical Quantiles", ylab = "Normal Data Quantiles")
qqline(SP_Vec,col = "red")
invisible(plot(qqnorm(SP_Vec),main = "Q-Q Plot of Log of S&P 500 Increments", xlab = "Normal Theoretical Quantiles", ylab = "Normal Data Quantiles"))
qqline(SP_Vec,col = "red")
plot(qqnorm(Noise_Vec),main = "Q-Q Plot of Simulated Random Walk Increments", xlab = "Normal Theoretical Quantiles", ylab = "Normal Data Quantiles")
#qqline(Noise_Vec,col = "red")
